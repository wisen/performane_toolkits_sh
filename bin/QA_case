#!/bin/bash
# auto build by config

. color.u
. process.u
. os.u
. applist.parser
. log.event
. log.kernel
. log.meminfo
. log.vmstat
. log.top
. meminfo.parser
. appinfo.parser
. kinfo.parser
. misc.parser
. vmstat.parser
. ext_free_bytes.conf

prepare_app_list $SCRIPT_ROOT/applist/QA.cold.launch.list

function testcase_QA_case {

	if [ ! $1 ];then
		test_cycles=50
	else
		test_cycles=$1
	fi

	#adb reboot
	adb wait-for-device

	#lock_cpu_freq
	#lock_cpu_freq
	#dis_cpu_hp
	#en_cpu_hp
	#set_dirty_ratio 20
	#set_bg_ratio 5
	set_ext_free_kbytes 32400
	#turn_on_processmanager
	#turn_off_processmanager
	#enable_zram
	#disable_zram
	#enable_ksm
	#disable_ksm
	#set_ksm_sleep_millisecs 20
	#set_ksm_pages_to_scan 100
	
	QA_case_start_time=`date "+%Y%m%d%H%M%S"`
	logfile_QA_case=logfile_actions_QA_case.${QA_case_start_time}.txt
	
	logfile_meminfo=logfile_meminfo_QA_case.${QA_case_start_time}.txt
	logfile_kernellog=logfile_kernellog_QA_case.${QA_case_start_time}.txt
	logfile_eventlog=logfile_eventlog_QA_case.${QA_case_start_time}.txt
	logfile_vmstat=logfile_vmstat_QA_case.${QA_case_start_time}.txt
	logfile_top=logfile_top_QA_case.${QA_case_start_time}.txt

	#start_terminal
	start_event_terminal $logfile_eventlog am_activity_launch_time am_kill am_anr am_pss
	start_kernel_ternimal $logfile_kernellog
	start_meminfo_terminal $logfile_meminfo
	start_vmstat_ternimal $logfile_vmstat
	start_top_terminal $logfile_top

	for ((i=0;i<${#activities[@]};i=$i+1))
	do
		for ((j=1;j<=$test_cycles;j=$j+1))
		do
			cur_freq=1248000
			cpu_online=0
			echo "CPU Freq: $cur_freq Online: $cpu_online" | tee -a $logfile_QA_case
			red_white "Cycle $test_cycles-$j, App $i" | tee -a $logfile_QA_case
			echo "["`date "+%Y-%m-%d %H:%M:%S"`"]Start activity: "${activities[$i]} | tee -a $logfile_QA_case
			timestamp=`adb shell cat /proc/uptime|awk '{print $1}'`
			#record_ftrace   &
			timeout 10 adb shell am start -W ${activities[$i]} | tee -a $logfile_QA_case

			timeout 3 adb shell input keyevent 3 #simulation user press home key

		done
	done
	QA_case_end_time=`date +%s`
	echo "The Test total use "$((${QA_case_end_time}-${QA_case_start_time}))" Seconds." | tee -a $logfile_QA_case
# 4. close all log bash
	kill_others
	
	logfile_result=logfile_result_QA_case.${QA_case_end_time}.txt
	#clac_the_result
	collect_misc_info | tee -a $logfile_result
	parse_meminfo $logfile_meminfo | tee -a $logfile_result
	parse_app_launchtime $logfile_eventlog | tee -a $logfile_result
	parse_app_crash $logfile_eventlog | tee -a $logfile_result
	parse_lmk_count_byADJ $logfile_kernellog | tee -a $logfile_result
	parse_vmstat $logfile_vmstat | tee -a $logfile_result
}

testcase_QA_case $1
#wait 10 sendmail.py -s "testcase_QA_case result" -c `cat $logfile_result`
