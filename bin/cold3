#!/bin/bash

. color.u
. process.u
. os.u
. applist.parser
. log.event
. log.kernel
. log.meminfo
. log.vmstat
. log.top
. meminfo.parser
. appinfo.parser
. kinfo.parser
. misc.parser
. vmstat.parser
. ext_free_bytes.conf

prepare_app_list $SCRIPT_ROOT/applist/tmp.app.list3

function testcase_cold3 {
	if [ ! $1 ];then
		test_cycles=50
	else
		test_cycles=$1
	fi

# 0. prepare logfile
	#adb reboot
	adb wait-for-device

	cold3_start_time=`date "+%Y%m%d%H%M%S"`
	logfile_cold3=logfile_cold3.$cold3_start_time.txt
	
	logfile_meminfo=logfile_memoryinfo.$cold3_start_time.txt
	logfile_kernellog=logfile_kernellog.$cold3_start_time.txt
	logfile_eventlog=logfile_eventlog.$cold3_start_time.txt
	logfile_vmstat=logfile_vmstat.$cold3_start_time.txt
	logfile_top=logfile_top.$cold3_start_time.txt

# 1. disable process manager
#	adb shell dumpsys activity feature ac off
#	adb shell dumpsys activity feature as off
# 2. lock cpu freq
#	adb shell "echo 1248000 > /sys/bus/cpu/devices/cpu0/cpufreq/scaling_min_freq"
#	adb shell "echo 1248000 > /sys/bus/cpu/devices/cpu0/cpufreq/scaling_max_freq"
	#adb shell "echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor"

# 2.1 cpu hotplug
#	adb shell "echo 0 > /proc/hps/enabled"
#	adb shell "echo 1 > /sys/devices/system/cpu/cpu0/online"
#	adb shell "echo 1 > /sys/devices/system/cpu/cpu1/online"
#	adb shell "echo 1 > /sys/devices/system/cpu/cpu2/online"
#	adb shell "echo 1 > /sys/devices/system/cpu/cpu3/online"

# 2.2 set dirty ratio
#	adb shell "echo 1 > /proc/sys/vm/dirty_background_ratio"
#	adb shell "echo 10 > /proc/sys/vm/dirty_ratio"
	
# 3. set extra_free_kbytes
	set_ext_free_kbytes 0
	
	#start to open terminal to record some usefull information
	#start_terminal
	start_event_terminal $logfile_eventlog am_activity_launch_time am_kill am_anr am_pss
	start_kernel_ternimal $logfile_kernellog
	start_meminfo_terminal $logfile_meminfo
	start_vmstat_ternimal $logfile_vmstat
	start_top_terminal $logfile_top
	
	cold3test_start_time=`date +%s`

	for ((j=1;j<=$test_cycles;j=$j+1))
	do
		for ((i=0;i<${#activities[@]};i=$i+1))
		do
			cur_freq=`adb shell "cat /sys/bus/cpu/devices/cpu0/cpufreq/cpuinfo_cur_freq"|awk '{if(NR==1) print $1}'`
			#cpu0=`adb shell cat /sys/devices/system/cpu/cpu0/online|awk '{if(NR==1) print $1;}'`
			#cpu1=`adb shell cat /sys/devices/system/cpu/cpu1/online|awk '{if(NR==1) print $1;}'`
			#cpu2=`adb shell cat /sys/devices/system/cpu/cpu2/online|awk '{if(NR==1) print $1;}'`
			#cpu3=`adb shell cat /sys/devices/system/cpu/cpu3/online|awk '{if(NR==1) print $1;}'`
			cpu_online=`adb shell "cat /sys/devices/system/cpu/online"|awk '{if(NR==1) print $1;}'`
			echo "CPU Freq: $cur_freq Online: $cpu_online" | tee -a $logfile_cold3
			red_white "Cycle $test_cycles-$j, App $i" | tee -a $logfile_cold3
			echo "["`date "+%Y-%m-%d %H:%M:%S"`"]Start activity: "${activities[$i]} | tee -a $logfile_cold3
			timestamp=`adb shell cat /proc/uptime|awk '{print $1}'`
			#record_ftrace ${packages[$i]} $timestamp ftrace &
			timeout 10 adb shell am start -W ${activities[$i]} | tee -a $logfile_cold3
			# timeout 10 adb shell am start -W ${activities[$i]} &
			# lastpid=$!
			# timeout 10 adb shell input keyevent 3
			# kill -9 $lastpid
			#read -n 1
			# kill -9 `cat .tmp.ftrace_pid|awk '{if(NR==1) print $1;}'`#discarded, use kill_ftrace replaced
			# kill_ftrace
			timeout 3 adb shell input keyevent 3 #simulation user press home key
			#sleep 5
			#echo "Force stop package: "${packages[$i]}
			#adb shell "am force-stop ${packages[$i]}"
			#sleep 2
		done
	done
	cold3test_end_time=`date +%s`
	echo "The Test total use "$(($cold3test_end_time-$cold3test_start_time))" Seconds." | tee -a $logfile_cold3
# 4. close all log bash
	kill_others > tmp.null 2 >> tmp.null
	
	logfile_result=logfile_result_cold3.$cold3test_end_time.txt
	#clac_the_result
	collect_misc_info | tee -a $logfile_result
	parse_meminfo $logfile_meminfo | tee -a $logfile_result
	parse_app_launchtime $logfile_eventlog | tee -a $logfile_result
	parse_app_crash $logfile_eventlog | tee -a $logfile_result
	parse_lmk_count_byADJ $logfile_kernellog | tee -a $logfile_result
	parse_vmstat $logfile_vmstat | tee -a $logfile_result
}

testcase_cold3 $1
