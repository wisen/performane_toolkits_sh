#!/usr/bin/env python

import numpy as np
import sys
import matplotlib.pyplot as plt
import xlwt
#from matplotlib.pyplot import savefig 

#CollectorType
  # // Non concurrent mark-sweep.
  # kCollectorTypeMS,
  # // Concurrent mark-sweep.
  # kCollectorTypeCMS,
  # // Semi-space / mark-sweep hybrid, enables compaction.
  # kCollectorTypeSS,
  # // A generational variant of kCollectorTypeSS.
  # kCollectorTypeGSS,
  # // Mark compact collector.
  # kCollectorTypeMC,
  # // Heap trimming collector, doesn't do any actual collecting.
  # kCollectorTypeHeapTrim,
  # // A (mostly) concurrent copying collector.
  # kCollectorTypeCC,
  # // Instrumentation critical section fake collector.
  # kCollectorTypeInstrumentation,
  # // Fake collector for adding or removing application image spaces.
  # kCollectorTypeAddRemoveAppImageSpace,
  # // A homogeneous space compaction collector used in background transition
  # // when both foreground and background collector are CMS.
  # kCollectorTypeHomogeneousSpaceCompact,
#GcType
  # // Sticky mark bits GC that attempts to only free objects allocated since the last GC.
  # //wisen: sticky标记上次GC以来分配的objects
  # kGcTypeSticky,
  # // Partial GC that marks the application heap but not the Zygote.
  # //wisen: partial标记application的heap，不包括Zygote的heap
  # kGcTypePartial,
  # // Full GC that marks and frees in both the application and Zygote heap.
  # //wisen: full标记application和zygote的heap
  # kGcTypeFull,
  # // Number of different GC types.
#GcCause
  # // GC triggered by a failed allocation. Thread doing allocation is blocked waiting for GC before
  # // retrying allocation.
  # kGcCauseForAlloc,
  # // A background GC trying to ensure there is free memory ahead of allocations.
  # kGcCauseBackground,
  # // An explicit System.gc() call.
  # kGcCauseExplicit,
  # // GC triggered for a native allocation.
  # kGcCauseForNativeAlloc,
  # // GC triggered for a collector transition.
  # kGcCauseCollectorTransition,
  # // Not a real GC cause, used when we disable moving GC (currently for GetPrimitiveArrayCritical).
  # kGcCauseDisableMovingGc,
  # // Not a real GC cause, used when we trim the heap.
  # kGcCauseTrim,
  # // Not a real GC cause, used to implement exclusion between GC and instrumentation.
  # kGcCauseInstrumentation,
  # // Not a real GC cause, used to add or remove app image spaces.
  # kGcCauseAddRemoveAppImageSpace,
  # // GC triggered for background transition when both foreground and background collector are CMS.
  # kGcCauseHomogeneousSpaceCompact,
  # // Class linker cause, used to guard filling art methods with special values.
  # kGcCauseClassLinker,

filename=sys.argv[1]
casename=sys.argv[2]

filep=open(filename,'rb')
i=0
a2=[]
a3=[]
t1=0
t2=0
t3=0
t4=0
pause_sum=0
total_sum=0
for line in filep.readlines():
	gctype,pause,total=line.split()
	a2.append(float(pause))
	a3.append(float(total))
	i=i+1
	pause_sum=pause_sum+float(pause)
	total_sum=total_sum+float(total)
	#print(gctype)
	#print(type(gctype))
	gctype_str=str(gctype, encoding = "utf-8")  
	if gctype_str == 't1':
		t1=t1+1
	elif gctype_str == 't2':
		t2=t2+1
	elif gctype_str == 't3':
		t3=t3+1
	elif gctype_str == 't4':
		t4=t4+1
a1={'BSCMS':t1, 'BPCMS':t2, 'CTMS':t3, 'ExCMS':t4}
		
pause_avg=pause_sum/i
total_avg=total_sum/i
fig = plt.figure(figsize=(16,8),dpi=100)
#fig = plt.figure()
plt.ylim(0,4000);
ymin, ymax = plt.ylim()

plt.plot(a3, color='green', label='total')
plt.plot(a2, color='red', label='pause')
total_x=[0, i]
total_y=[total_avg, total_avg]
plt.plot(total_x, total_y, color='yellow', label='total_avg')
pause_x=[0, i]
pause_y=[pause_avg, pause_avg]
plt.plot(pause_x, pause_y, color='blue', label='pause_avg')
plt.legend(loc='upper right')

plt.text(0,ymax-80,"total gc:            "+str(i))
plt.text(0,ymax-160,"total pause(s):  "+str("%.2f"%(pause_sum/1000)))
plt.text(0,ymax-240,"total time(s):     "+str("%.2f"%(total_sum/1000)))
plt.text(0,ymax-320,"total avg(ms):   "+str("%.2f"%total_avg))
plt.text(0,ymax-400,"pause avg(ms): "+str("%.2f"%pause_avg))
plt.text(0,ymax-480,"BSCMS:  "+str(a1.get('BSCMS')))
plt.text(0,ymax-560,"BPCMS:  "+str(a1.get('BPCMS')))
plt.text(0,ymax-640,"CTMS:    "+str(a1.get('CTMS')))
plt.text(0,ymax-720,"ExCMS:  "+str(a1.get('ExCMS')))
plt.text(0,ymax-800,"SPratio: "+str("%.2f"%(a1.get('BSCMS')/a1.get('BPCMS'))))
plt.title("GC case: "+casename)
plt.xlabel("times")
plt.ylabel("time(ms)")
#plt.show()
#savefig(casename+".png", dpi=600)
fig.savefig(casename+".png")

start_row=2
start_col=2

workbook = xlwt.Workbook(encoding = 'ascii')
worksheet = workbook.add_sheet('Gc_result')
style = xlwt.Style.XFStyle()
fnt = xlwt.Font()
fnt.name = u'微软雅黑'
style.font = fnt

worksheet.write(start_row, start_col, label = '测试集合', style=style)
worksheet.write(start_row, start_col+1, label = 'GC', style=style)
worksheet.write(start_row, start_col+2, label = 'Total AVG', style=style)
worksheet.write(start_row, start_col+3, label = 'Pause AVG', style=style)
worksheet.write(start_row, start_col+4, label = 'BSCMS', style=style)
worksheet.write(start_row, start_col+5, label = 'BPCMS', style=style)
worksheet.write(start_row, start_col+6, label = 'CTMS', style=style)
worksheet.write(start_row, start_col+7, label = 'ExCMS', style=style)
worksheet.write(start_row, start_col+8, label = 'Spratio', style=style)

worksheet.write(start_row+1, start_col, casename, style=style)
worksheet.write(start_row+1, start_col+1, i, style=style)
worksheet.write(start_row+1, start_col+2, "%.2f"%total_avg, style=style)
worksheet.write(start_row+1, start_col+3, "%.2f"%pause_avg, style=style)
worksheet.write(start_row+1, start_col+4, a1.get('BSCMS'), style=style)
worksheet.write(start_row+1, start_col+5, a1.get('BPCMS'), style=style)
worksheet.write(start_row+1, start_col+6, a1.get('CTMS'), style=style)
worksheet.write(start_row+1, start_col+7, a1.get('ExCMS'), style=style)
worksheet.write(start_row+1, start_col+8, "%.2f"%(a1.get('BSCMS')/a1.get('BPCMS')), style=style)

workbook.save(casename+'.xls')
