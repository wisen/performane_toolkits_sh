#!/usr/bin/env python

import sys
import getopt

def usage():
    usage_str='''
        command [options] [args]
        options:
            -h --help: show the usage
            -v --view: show the ELF View
            -f --file filename: the file which we need to parse
            --struct header|xxx: show the detail of the appointed struct
    '''
    print(usage_str)

def print_elf_view():
    view_str='''
           Link View                     Excution View
    ---------------------------    ---------------------------
    |       Elf Header        |    |       Elf Header        |
    ---------------------------    ---------------------------
    |   Program header table  |    |   Program header table  |
    |        optional         |    ---------------------------
    ---------------------------    |        segment 1        |
    |        section 1        |    ---------------------------
    ---------------------------    |        ......           |
    |        ......           |    ---------------------------
    ---------------------------    |        segment n        |
    |        section n        |    ---------------------------
    ---------------------------    |   Section header table  |
    |   Section header table  |    |        optional         |
    ---------------------------    ---------------------------

    '''
    print(view_str)

def print_struct_of(arg):
    if arg == "header":
        struct_str='''
            #define EI_NIDENT 16
            typedef struct{
                unsigned char e_ident[EI_NIDENT];
                Elf32_Half e_type;
                Elf32_Half e_machine;
                Elf32_Word e_version;
                Elf32_Addr e_entry;
                Elf32_Off e_phoff;
                Elf32_Off e_shoff;
                Elf32_Word e_flags;
                Elf32_Half e_ehsize;
                Elf32_Half e_phentsize;
                Elf32_Half e_phnum;
                Elf32_Half e_shentsize;
                Elf32_Half e_shnum;
                Elf32_Half e_shstrndx;
            }Elf32_Ehdr

            e_ident:
                indexes:
                    Name     Value Purpose
                    EI_MAG0    0   File identification
                    EI_MAG1    1   File identification
                    EI_MAG2    2   File identification
                    EI_MAG3    3   File identification
                    EI_CLASS   4   File class
                    EI_DATA    5   Data encoding
                    EI_VERSION 6   File version
                    EI_PAD     7   Start of padding bytes
                    EI_NIDENT  16  Size of e_ident[]
                index0~3:
                    Name    Value Position
                    ELFMAG0 0x7f  e_ident[EI_MAG0]
                    ELFMAG1 ’E’   e_ident[EI_MAG1]
                    ELFMAG2 ’L’   e_ident[EI_MAG2]
                    ELFMAG3 ’F’   e_ident[EI_MAG3]
                EI_CLASS:
                    Name         Value    Meaning
                    ELFCLASSNONE  0     Invalid class
                    ELFCLASS32    1     32-bit objects
                    ELFCLASS64    2     64-bit objects
            e_type:
                  Name    Value      Meaning
                ET_NONE        0 No file type
                ET_REL         1 Relocatable file
                ET_EXEC        2 Executable file
                ET_DYN         3 Shared object file
                ET_CORE        4 Core file
                ET_LOPROC 0xff00 Processor-specific
                ET_HIPROC 0xffff Processor-specific

            e_machine:
                Name    Value   Meaning
                EM_NONE   0   No machine
                EM_M32    1   AT&T WE 32100
                EM_SPARC  2   SPARC
                EM_386    3   Intel 80386
                EM_68K    4   Motorola 68000
                EM_88K    5   Motorola 88000
                EM_860    7   Intel 80860
                EM_MIPS   8   MIPS RS3000

            e_version:
                Name     Value   Meaning
                EV_NONE    0   Invalid version
                EV_CURRENT 1   Current version
        '''
        print(struct_str)
def parse_elffile(filename):
    filep = open(filename, 'rb')
    try:
        chunk = filep.read(52)
        print("ELF Header:")
        print("  Magic: %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x"%(chunk[0],chunk[1],chunk[2],chunk[3],chunk[4],chunk[5],chunk[6],chunk[7],chunk[8],chunk[9],chunk[10],chunk[11],chunk[12],chunk[13],chunk[14],chunk[15]))
        if (chunk[4] == 0x00):
            class_str="Invalid Class"
        elif (chunk[4] == 0x01):
            class_str="ELF32"
        elif (chunk[4] == 0x02):
            class_str = "ELF64"

        if (chunk[5] == 0x00):
            data_str="Incalid data encoding"
        elif (chunk[5] == 0x01):
            data_str="little endian"
        elif (chunk[5] == 0x02):
            data_str="big endian"

        if (chunk[0x07] == 0x00):
            os_abi_str="System V"
        elif (chunk[0x07] == 0x01):
            os_abi_str="HP-UX"
        elif (chunk[0x07] == 0x02):
            os_abi_str="NetBSD"
        elif (chunk[0x07] == 0x03):
            os_abi_str="Linux"
        elif (chunk[0x07] == 0x04):
            os_abi_str="GNU Hurd"
        elif (chunk[0x07] == 0x06):
            os_abi_str="Solaris"
        elif (chunk[0x07] == 0x07):
            os_abi_str="AIX"
        elif (chunk[0x07] == 0x08):
            os_abi_str="IRIX"
        elif (chunk[0x07] == 0x09):
            os_abi_str="FreeBSD"
        elif (chunk[0x07] == 0x0a):
            os_abi_str="Tru64"
        elif (chunk[0x07] == 0x0b):
            os_abi_str="Novell Modesto"
        elif (chunk[0x07] == 0x0c):
            os_abi_str="OpenBSD"
        elif (chunk[0x07] == 0x0d):
            os_abi_str="OpenVMS"
        elif (chunk[0x07] == 0x0e):
            os_abi_str="NonStop Kernel"
        elif (chunk[0x07] == 0x0f):
            os_abi_str="AROS"
        elif (chunk[0x07] == 0x10):
            os_abi_str="Fenix OS"
        elif (chunk[0x07] == 0x11):
            os_abi_str="CloudABI"
        elif (chunk[0x07] == 0x53):
            os_abi_str="Sortix"
        else:
            os_abi_str = "Unkown OS"

        if (chunk[16] == 0x00):
            type_str="No file Type"
        elif (chunk[16] == 0x01):
            type_str = "Relocation file"
        elif (chunk[16] == 0x02):
            type_str = "Execution file"
        elif (chunk[16] == 0x03):
            type_str = "Shared object file"
        elif (chunk[16] == 0x04):
            type_str = "Core file"

        if (chunk[18] == 0x00):
            machine_str = "No Machine"
        elif (chunk[18] == 0x01):
            machine_str = "AT&T WE 32100"
        elif (chunk[18] == 0x02):
            machine_str = "SPARC"
        elif (chunk[18] == 0x03):
            machine_str = "Intel 80386"
        elif (chunk[18] == 0x04):
            machine_str = "Motorola 68000"
        elif (chunk[18] == 0x05):
            machine_str = "Motorola 88000"
        elif (chunk[18] == 0x07):
            machine_str = "Intel 80860"
        elif (chunk[18] == 0x08):
            machine_str = "MIPS RS3000"
        elif (chunk[18] == 0x14):
            machine_str = "PowerPC"
        elif (chunk[18] == 0x28):
            machine_str = "ARM"
        elif (chunk[18] == 0x2A):
            machine_str = "SuperH"
        elif (chunk[18] == 0x32):
            machine_str = "IA-64"
        elif (chunk[18] == 0x3e):
            machine_str = "X86-64"
        elif (chunk[18] == 0xb7):
            machine_str = "AArch64"
        elif (chunk[18] == 0xf3):
            machine_str = "RISC-V"
        else:
            machine_str = "Unkown Machine"

        print("  Class:                             %s" % (class_str))
        print("  Data:                              %s" % (data_str))
        print("  Version:                           %d" % chunk[6])
        print("  OS/ABI:                            %s" % (os_abi_str))
        print("  ABI Version:                       %d" % (chunk[0x08]))
        print("  Type:                              %s" % (type_str))
        print("  Machine:                           %s"%(machine_str))
        print("  Version:                           0x%02x%02x%02x%02x"%(chunk[23],chunk[22],chunk[21],chunk[20]))
        print("  Entry point address:               0x%02x%02x%02x%02x"%(chunk[27],chunk[26],chunk[25],chunk[24]))
        print("  Start of program headers:          %d (bytes into file)"%(int(chunk[31]<<24)+int(chunk[30]<<16)+int(chunk[29]<<8)+int(chunk[28])))
        print("  Start of section headers:          %d (bytes into file)"%(int(chunk[35]<<24)+int(chunk[34]<<16)+int(chunk[33]<<8)+int(chunk[32])))
        print("  Flags:                             0x%02x%02x%02x%02x"%(chunk[39],chunk[38],chunk[37],chunk[36]))
        print("  Size of this header:               %d (bytes)"%(int(chunk[41])+int(chunk[40])))
        print("  Size of program headers:           %d (bytes)"%(int(chunk[43])+int(chunk[42])))
        print("  Number of program headers:         %d"%(int(chunk[45])+int(chunk[44])))
        print("  Size of section headers:           %d (bytes)"%(int(chunk[47])+int(chunk[46])))
        print("  Number of section headers:         %d"%(int(chunk[49])+int(chunk[48])))
        print("  Section header string table index: %d"%(int(chunk[51])+int(chunk[50])))
    finally:
        filep.close()
def main(argv):
    try:
        opts, args = getopt.getopt(argv, "hvf:",["help","view","struct=","file="])
        #print("opts=", opts)
        #print("args=", args)
    except getopt.GetoptError:
        usage()
        sys.exit(2)
    if not opts:
        usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt in ("-v","--view"):
            print_elf_view()
            sys.exit(0)
        if opt in ("--struct"):
            struct_arg = arg
            print_struct_of(struct_arg)
            sys.exit(0)
        if opt in ("-f","--file"):
            filename = arg
            parse_elffile(filename)
            sys.exit(0)
if __name__=="__main__":
    main(sys.argv[1:])