Help on module email.utils in email:

NAME
    email.utils - Miscellaneous utilities.

FUNCTIONS
    collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')
    
    decode_params(params)
        Decode parameters list according to RFC 2231.
        
        params is a sequence of 2-tuples containing (param name, string value).
    
    decode_rfc2231(s)
        Decode string according to RFC 2231
    
    encode_rfc2231(s, charset=None, language=None)
        Encode string according to RFC 2231.
        
        If neither charset nor language is given, then s is returned as-is.  If
        charset is given but not language, the string is encoded using the empty
        string for language.
    
    format_datetime(dt, usegmt=False)
        Turn a datetime into a date string as specified in RFC 2822.
        
        If usegmt is True, dt must be an aware datetime with an offset of zero.  In
        this case 'GMT' will be rendered instead of the normal +0000 required by
        RFC2822.  This is to support HTTP headers involving date stamps.
    
    formataddr(pair, charset='utf-8')
        The inverse of parseaddr(), this takes a 2-tuple of the form
        (realname, email_address) and returns the string value suitable
        for an RFC 2822 From, To or Cc header.
        
        If the first element of pair is false, then the second element is
        returned unmodified.
        
        Optional charset if given is the character set that is used to encode
        realname in case realname is not ASCII safe.  Can be an instance of str or
        a Charset-like object which has a header_encode method.  Default is
        'utf-8'.
    
    formatdate(timeval=None, localtime=False, usegmt=False)
        Returns a date string as specified by RFC 2822, e.g.:
        
        Fri, 09 Nov 2001 01:08:47 -0000
        
        Optional timeval if given is a floating point time value as accepted by
        gmtime() and localtime(), otherwise the current time is used.
        
        Optional localtime is a flag that when True, interprets timeval, and
        returns a date relative to the local timezone instead of UTC, properly
        taking daylight savings time into account.
        
        Optional argument usegmt means that the timezone is written out as
        an ascii string, not numeric one (so "GMT" instead of "+0000"). This
        is needed for HTTP, and is only used when localtime==False.
    
    getaddresses(fieldvalues)
        Return a list of (REALNAME, EMAIL) for each fieldvalue.
    
    make_msgid(idstring=None, domain=None)
        Returns a string suitable for RFC 2822 compliant Message-ID, e.g:
        
        <142480216486.20800.16526388040877946887@nightshade.la.mastaler.com>
        
        Optional idstring if given is a string used to strengthen the
        uniqueness of the message id.  Optional domain if given provides the
        portion of the message id after the '@'.  It defaults to the locally
        defined hostname.
    
    mktime_tz(data)
        Turn a 10-tuple as returned by parsedate_tz() into a POSIX timestamp.
    
    parseaddr(addr)
    
    parsedate(data)
        Convert a time string to a time tuple.
    
    parsedate_to_datetime(data)
    
    parsedate_tz(data)
        Convert a date string to a time tuple.
        
        Accounts for military timezones.
    
    unquote(str)
        Remove quotes from a string.

DATA
    __all__ = ['collapse_rfc2231_value', 'decode_params', 'decode_rfc2231'...

FILE
    e:\python35\lib\email\utils.py


